api:
  common:
    version: 1.0.0
    title: Product Microservices API
    description: Developing Microservices using springboot and spring cloud
    termsOfServiceUrl: Apache OS
    license: Apache License 2.0
    licenseUrl: Apache URL
    contact:
      name: Habeeb Okunade
      url: habeebcycle.com
      email: habeebcycle@gmail.com
  product-composite-service:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found, the method will return information regarding:
        1. Base product information
        2. Reviews
        3. Recommendations
        4. Service/Server addresses
        (Technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a <b>404 - Not Found</b> error will be returned
        2. If no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.

server:
  port: 7000
  error:
    include-message: always

service:
  discovery-server:
    host: localhost
    port: 8761
    username: u
    password: p
  auth-server:
    host: localhost
    port: 9999
  auth0:
    domain: dev-habeebcycle-m1.auth0.com

# Discovery server configuration
eureka:
  client:
    serviceUrl:
      defaultZone: http://${service.discovery-server.username}:${service.discovery-server.password}@${service.discovery-server.host}:${service.discovery-server.port}/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5
# Ribbon for load balancing
ribbon:
  ServerListRefreshInterval: 5000
  NFLoadBalancerPingInterval: 5

# We will get these from the discovery server
app: # We are using service discovery
  product-service:
    url: http://product-service
  recommendation-service:
    url: http://recommendation-service
  review-service:
    url: http://review-service

spring:
  application:
    name: product-composite-service

  # OAuth2 Resource security

  # Using the local auth-server in the project
  #security.oauth2.resourceserver.jwt.jwk-set-uri: http://${service.auth-server.host}:${service.auth-server.port}/.well-known/jwks.json

  # Using the OAuth2 provider domain - Auth0
  #security.oauth2.resourceserver.jwt.issuer-uri: https://${service.auth0.domain}/
  security.oauth2.resourceserver.jwt.issuer-uri: https://dev-habeebcycle-m1.auth0.com/

  # RabbitMQ parameters
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  # Messaging binders for the cloud streaming
  cloud.stream:
    # Default binder
    defaultBinder: rabbit
    default.contentType: application/json
    # Bindings
    bindings:
      output-products:
        destination: products
        producer:
          required-groups: auditGroup
      output-recommendations:
        destination: recommendations
        producer:
          required-groups: auditGroup
      output-reviews:
        destination: reviews
        producer:
          required-groups: auditGroup
    # Kafka binder broker (zookeeper) host & port
    kafka.binder:
      brokers: 127.0.0.1       # Kafka host
      defaultBrokerPort: 9092  # Kafka port

# Logging settings
logging:
  level:
    root: INFO
    com.habeebcycle: DEBUG

# Actuator endpoints
management.endpoints:
  health.show-details: "ALWAYS"
  web.exposure.include: "*"   # Lock this up in production


---
spring:
  config:
    activate:
      on-profile:
        - docker
  rabbitmq.host: rabbitmq
  cloud.stream.kafka.binder.brokers: kafka

server:
  port: 8080

service:
  discovery-server:
    host: discovery-server
  auth-server:
    host: auth-server

---
spring:
  config:
    activate:
      on-profile:
        - kubernetes
  rabbitmq.host: rabbitmq
  cloud.stream.kafka.binder.brokers: kafka

#Enable liveness and readiness probes
management.health.probes.enabled: true

service:
  discovery-server:
    host: discovery-server
  auth-server:
    host: auth-server

server:
  port: 8080