version: '2.1'

# Running Kafka in 2 -partitions

services:
  product-service:
    #image: product-service:05-reactive-event-driven
    build: microservices/product-service
    mem_limit: 300m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
    container_name: product-service
    depends_on:
      - kafka
      - mongodb

  product-service-partition:
    #image: product-service:05-reactive-event-driven
    build: microservices/product-service
    mem_limit: 300m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
    container_name: product-service-partition
    depends_on:
      - kafka
      - mongodb

  recommendation-service:
    #image: recommendation-service:05-reactive-event-driven
    build: microservices/recommendation-service
    mem_limit: 300m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
    container_name: recommendation-service
    depends_on:
      - kafka
      - redis

  recommendation-service-partition:
    #image: recommendation-service:05-reactive-event-driven
    build: microservices/recommendation-service
    mem_limit: 300m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
    container_name: recommendation-service-partition
    depends_on:
      - kafka
      - redis

  review-service:
    #image: review-service:05-reactive-event-driven
    build: microservices/review-service
    mem_limit: 300m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
    container_name: review-service
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  review-service-partition:
    #image: review-service:05-reactive-event-driven
    build: microservices/review-service
    mem_limit: 300m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
    container_name: review-service-partition
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  product-composite-service:
    #image: product-composite-service:05-reactive-event-driven
    build: microservices/product-composite-service
    mem_limit: 300m
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_REPLICATION-FACTOR=1
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-PRODUCTS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-PRODUCTS_PRODUCER_PARTITION-COUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RECOMMENDATIONS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RECOMMENDATIONS_PRODUCER_PARTITION-COUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-REVIEWS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-REVIEWS_PRODUCER_PARTITION-COUNT=2
    container_name: product-composite-service
    depends_on:
      - kafka

  # Discovery Server
  discovery-server:
    build: cloud-services/discovery-server
    mem_limit: 300m
    ports:
      - "8761:8761"
    container_name: discovery-server

  # mongodb cli:
  # $ docker-compose exec mongodb mongo --quiet
  mongodb:
    image: mongo:3.6.9
    mem_limit: 300m
    ports:
      - "27017:27017"
    container_name: mongodb
    command: mongod --smallfiles

  # redis cli
  # $ docker-compose exec redis redis-cli
  redis:
    image: redis:alpine
    mem_limit: 300m
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
    container_name: redis
    command: redis-server --requirepass pwd

  # mysql cli
  # $ mysql -uroot -h127.0.0.1 -p
  # $ docker-compose exec mysql mysql -uuser -p review-db
  mysql:
    image: mysql:5.7
    mem_limit: 300m
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    container_name: mysql
    healthcheck:
      # "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      test: ["CMD", "mysqladmin", "ping", "-uuser", "-ppwd", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: wurstmeister/kafka
    mem_limit: 300m
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    container_name: kafka
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper
    mem_limit: 300m
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper
    container_name: zookeeper