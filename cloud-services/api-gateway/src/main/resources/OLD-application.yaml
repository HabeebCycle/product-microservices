server:
  port: 8443
  ssl:
    key-store-type: PKCS12
    key-store: classpath:keystore/edge.p12
    key-store-password: password
    key-alias: localhost
  error:
    include-message: always

service:
  discovery-server:
    host: localhost
    port: 8761
    username: u
    password: p
  auth-server:
    host: localhost
    port: 9999
  config-server:
    host: localhost
    port: 8888
  auth0:
    domain: dev-habeebcycle-m1.auth0.com

# We will get these from the discovery server
app: # We are using service discovery
  product-service:
    url: http://product-service
  recommendation-service:
    url: http://recommendation-service
  review-service:
    url: http://review-service
  composite-service:
    url: http://product-composite-service

# Discovery server configuration
eureka:
  client:
    serviceUrl:
      defaultZone: http://${service.discovery-server.username}:${service.discovery-server.password}@${service.discovery-server.host}:${service.discovery-server.port}/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5
# Ribbon for load balancing
ribbon:
  ServerListRefreshInterval: 5000
  NFLoadBalancerPingInterval: 5

spring:
  application:
    name: api-gateway

  # OAuth2 Resource security

  # Using the local auth-server in the project
  #security.oauth2.resourceserver.jwt.jwk-set-uri: http://${service.auth-server.host}:${service.auth-server.port}/.well-known/jwks.json

  # Using the OAuth2 provider domain - Auth0
  #security.oauth2.resourceserver.jwt.issuer-uri: https://${service.auth0.domain}/
  security.oauth2.resourceserver.jwt.issuer-uri: https://dev-habeebcycle-m1.auth0.com/

  # Cloud gateway routes settings
  cloud:
    gateway:
      #httpclient:
        #connect-timeout: 20000
        #response-timeout: 20s
      routes:
        - id: product-composite
          uri: lb://product-composite-service
          predicates:
            - Path=/product-composite/**
        - id: oauth-server
          uri: lb://auth-server
          predicates:
            - Path=/oauth/**
        - id: discovery-server-api
          uri: http://${service.discovery-server.host}:${service.discovery-server.port}
          predicates:
            - Path=/eureka/api/{segment}
          filters:
            - SetPath=/eureka/{segment}
        - id: discovery-server-web
          uri: http://${service.discovery-server.host}:${service.discovery-server.port}
          predicates:
            - Path=/eureka/web
          filters:
            - SetPath=/
        - id: discovery-server-other
          uri: http://${service.discovery-server.host}:${service.discovery-server.port}
          predicates:
            - Path=/eureka/**
        - id: config-server
          uri: http://${service.config-server.host}:${service.config-server.port}
          predicates:
            - Path=/config/**
          filters:
            - RewritePath=/config/(?<segment>.*), /$\{segment}

        # Testing some routes
        - id: host_route_200
          uri: http://httpstat.us
          predicates:
            - Host=i.feel.lucky:8080
            - Path=/headerrouting/**
          filters:
            - SetPath=/200
        - id: host_route_418
          uri: http://httpstat.us
          predicates:
            - Host=im.a.teapot:8080
            - Path=/headerrouting/**
          filters:
            - SetPath=/418
        - id: host_route_501
          uri: http://httpstat.us
          predicates:
            - Path=/headerrouting/**
          filters:
            - SetPath=/501

# Logging settings
logging:
  level:
    root: INFO
    com.habeebcycle: DEBUG
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
    org.springframework.cloud.gateway: TRACE

# Actuator endpoints
management.endpoints:
  health.show-details: "ALWAYS"
  web.exposure.include: "*"   # Lock this up in production

---
spring:
  config:
    activate:
      on-profile:
        - docker

service:
  discovery-server:
    host: discovery-server
  auth-server:
    host: auth-server

---
spring:
  config:
    activate:
      on-profile:
        - kubernetes

#Enable liveness and readiness probes
management.health.probes.enabled: true

service:
  discovery-server:
    host: discovery-server
  auth-server:
    host: auth-server